<div class="max-w-lg">
  <%= turbo_frame_tag "transaction_kinds", data: { controller: "transaction-kind-navigate" } do %>
    <%= form_with(model: transaction, url: [account, transaction], data: { turbo_frame: "_top" }, html: { class: 'space-y-4 md:space-y-6'}) do |f| %>
      <% recipient_errors = transaction.errors[:recipient_id] + transaction.errors[:recipient] %>

      <div class="flex gap-4">
        <% Transaction.kinds.map(&:first).each do |kind_name| %>
          <%= f.label(:kind, value: kind_name) do %>
            <%= f.radio_button(:kind, kind_name, data: { action: "change->transaction-kind-navigate#to", url: new_account_transaction_path({ transaction: { kind: kind_name } }) }) %>
            <span><%= kind_name.titleize %></span>
          <% end %>
        <% end %>
      </div>

      <% if transaction.deposit? %>
        <div>
          <%= f.label(:recipient_amount, Transaction.human_attribute_name(:recipient_amount), class: form_label_classes(transaction.errors[:recipient_amount])) %>
          <%= f.number_field(:recipient_amount, autofocus: true, step: 0.000001, class: form_input_classes(transaction.errors[:recipient_amount])) %>
          <%= render_errors(transaction.errors[:recipient_amount]) %>
        </div>
      <% else %>
        <div>
          <%= f.label(:sender_amount, Transaction.human_attribute_name(:sender_amount), class: form_label_classes(transaction.errors[:sender_amount])) %>
          <%= f.number_field(:sender_amount, autofocus: true, step: 0.000001, class: form_input_classes(transaction.errors[:sender_amount])) %>
          <%= render_errors(transaction.errors[:sender_amount]) %>
        </div>

        <% unless transaction.withdrawal? %>
          <div>
            <%= f.label(:recipient_id, Transaction.human_attribute_name(:recipient_id), class: form_label_classes(recipient_errors)) %>
            <%= f.select(:recipient_id, options_for_select(Account.where.not(id: account.id).map { |a| ["#{a.human_number} / #{a.currency_name} / #{a.user_full_name}", a.id] }),  { prompt: "select a recipient" }, { class: form_input_classes(recipient_errors) }) %>
            <%= render_errors(recipient_errors) %>
          </div>

          <% if transaction.scheduled? %>
            <div>
              <%= f.label(:execution_date, Transaction.human_attribute_name(:execution_date), class: form_label_classes(transaction.errors[:execution_date])) %>
              <%= f.datetime_field(:execution_date, data: { controller: "flatpickr", field_kind_target: "executionDate" }, class: form_input_classes(transaction.errors[:execution_date])) %>
              <%= render_errors(transaction.errors[:execution_date]) %>
            </div>
          <% end %>
        <% end %>
      <% end %>

      <div class="flex justify-between">
        <%= f.submit("Create", class: "px-5 py-2.5 text-base font-medium text-center text-white bg-blue-600 hover:bg-blue-700 rounded-lg focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800") %>
        <%= link_to("Back to my account", account_path(account), data: { turbo_frame: "_top" }, class: "px-5 py-2.5 text-base font-medium text-center text-white bg-gray-600 hover:bg-gray-700 rounded-lg focus:ring-4 focus:outline-none focus:ring-gray-300 dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800") %>
      </div>
    <% end %>
  <% end %>
</div>
